---
layout: post
title:  "[도서] Good Code, Bad Code - CHAPTER 1 코드 품질"
date:   2023-06-26 22:00:25 +0900
categories: book
---
# 1. 코드 품질
## 1.1 코드는 어떻게 소프트웨어가 되는가
코드로부터 실제 서비스되는 환경에서 실행되는 소프트웨어가 되기까지의 과장은 대개 다음과 같다.
1. 개발자가 코드베이스의 로컬 복사본을 가지고 작업하면서 코드를 변경한다.
2. 작업이 끝나면 코드 검토를 위해 변경된 코드를 가지고 병합 요청을 한다.
3. 다른 개발자가 코드를 검토하고 변경을 제안할 수 있다.
4. 작성자와 검토자가 모두 동의하면 코드가 코드베이스에 병합된다.
5. 배포는 코드베이스를 가지고 주기적으로 일어난다.얼마나 자주 배포되는지는 조직과 팀마다 다를 수 있다.
6. 테스트에 실패하거나 코드가 컴파일되지 않으면 코드베이스에 병합되는 것을 막거나 코드가 배포되는 것을 막는다.

## 1.2 코드 품질의 목표
높은 품질의 코드의 4가지 목표
1. 작동해야 한다.
2. 작동이 멈춰서는 안 된다.
3. 변화하는 요구 사항에 적응해야 한다.
4. 이미 존재하는 기능을 또다시 구현해서는 안 된다.

### 1.2.1 코드는 작동해야 한다.
코드의 첫 번 째 목표는 목적(요구 사항)대로 동작해야 한다는 것.
코드는 우리가 해결하려고 하는 문제를 실제로 해결해야 한다. 이것은 또한 버그가 없다는 것을 의미한다.

### 1.2.2 코드는 작동이 멈추면 안 된다.
왜 코드가 갑자기 작동을 멈출까
- 코드는 다른 코드에 의존할 수 있는데, 그 코드가 수정되고 변경될 수 있다.
- 새로운 기능이 필요할 때 코드를 수정해야 할 수도 있다.
- 해결하려고 하는 문제는 시간이 지남에 따라 변경된다.

현재는 잘 돌아가지만 미래에 이런 것 중 하나가 변경된 경우, 제대로 동작하지 않는다면 그 코드는 별로 유용한 코드가 아니다.<br>
**당장 돌아가는 코드를 만들기는 쉽지만, 변화하는 환경과 요구 사항에도 계속 작동하는 코드를 만드는 것은 훨씬 더 어렵다.**<br>
코드가 계속 작동하도록 보장하는 것은 소프트웨어 엔지니어가 직면하는 큰 과제 중 하나이며, 코딩의 모든 단계에서 고려해야 할 사항이다.

### 1.2.3 코드는 변경된 요구 사항에 적응할 수 있어야 한다.
한 번 작성하고 다시는 수정되지 않는 코드는 거의 없다.
- 비지니스 환경이 변한다
- 사용자 선호가 변한다
- 가정이 더 이상 유효하지 않다.
- 새로운 기능이 계속 추가된다.

코드는 변화 하기 때문에 어떻게 변화할 지 정확히 알지 못해도, 변화에 적응성 높은 코드를 작성해야 한다.

### 1.2.4 코드는 이미 존재하는 기능을 중복 구현해서는 안 된다.
문제 해결을 위해 코드를 작성할 때, 일반적으로 큰 문제를 여러 개의 작은 하위 문제로 나눈다.

이미지 파일을 로드하고 흑백 이미지로 변환한 다음에 다시 저장하는 경우, 해결해야 할 하위 문제는 다음과 같다.
- 파일에서 바이트 데이터를 로드한다
- 바이트 데이터를 분석해서 이미지 형식으로 만든다.
- 이미지를 흑백으로 변환한다.
- 이미지를 다시 바이트로 변환한다.
- 바이트 데이터를 파일로 저장한다.

하위 문제 중 많은 것들은 이미 다른 사람이 해결한 상태이다.<br>
파일에서 바이트 데이터를 로드, 파일 시스템과 통신, 바이트를 이미지로 만드는 문제는 기존 라이브러리가 있을 것이다.<br>
위 말한 기능을 스스로 작성 한다면 이미 존재하는 기능의 중복 구현일 뿐이다.<br>
이미 구현된 코드를 재사용하면 좋은 몇 가지 이유
- **시간과 노력을 절약한다.**
- **버그 가능성을 줄여준다.**
- **기존 전문지식을 활용한다.**
- **코드가 이해하기 쉽다.**

이미 있는 코드는 다시 작성하지 않는다는 개념은 양방향으로 적용된다.<br>
문제 해결을 위한 다른 개발자가 이미 코드를 작성했다면, 그것을 해결하기 위해 그들의 코드를 사용해야 한다.
마찬가지로 어떤 문제를 해결하기 위해 자신이 이미 코드를 작성했다면, 다른 개발자들이 동일 문제 해결하기 위해 **쉽게 재사용할 수 있는 방식으로 코드를 구성**해야 한다.<br>

`같은 종류의 하위 문제가 종종 반복해서 발생하기 때문에 다른 개발자와 팀 간의 코드를 공유하면 이점이 많다는 것을 금방 알게 된다.`

## 1.3 코드 품질의 핵심 요소

### 1. 코드는 읽기 쉬워야 한다
코드를 읽을 때 다음과 같은 사항을 이해하려 한다.
1. 코드가 하는 일
2. 어떻게 그 일을 수행하는지
3. (입력이나 상태 등) 어떤 것을 필요로 하는지
4. 코드 실행 결과물

코드의 가독성이 떨어진다면, 다른 개발자가 그 코드를 이해하는 데 많은 시간을 들여야 한다. 또한, 코드의 기능에 대해 잘못 이해하거나 중요한 세부 사항을 놓칠 가능성 역시 크다. 
이는 코드 검토 중에 버그를 발견할 가능성이 작고, 다른 사람이 코드를 수정할 때 새로운 버그가 도입될 가능성이 크다.<br>
**그 코드 무엇을 하는지 개발자가 이해하지 못하면, 소프트웨어 전체가 제대로 작동하는 것은 거의 불가능에 가깝다. 코드도 읽을 수 있어야 한다.**

### 2. 코드는 예측이 가능해야 한다
코드를 작성할 때, 아무리 좋은 의도를 가지고 있더라도 예상을 벗어난 동작을 수행하는 위험이 있을 수 있다. 코드가 예상에서 벗어나는 일을 한다면, 
그 코드를 사용하는 개발자는 그 상황을 알지 못하거나 그 상황에 대처할 생각을 하지 못할 것이다. 문제의 코드와는 전혀 상관없어 보이는 부분에서 명백하게 이상한 일이 발견되기 전까지 시스템은 계속 비정상적으로 작동한다.
**코드가 예상을 벗어나는 일을 수행하지는 않는지 주의 깊게 살펴야 하고, 할 수 있다면 그런 코드를 작성하지 않도록 노력해야 한다.**

### 3. 코드는 오용하기 어렵게 만들라
자신이 작성하는 코드는 종종 다른 코드에 의해 호출되는데, 이것은 TV 뒷면(전원 코드와 HDMI 코드 모양이 다르다. 두 코드는 꽂는게 불가능하게 만들어져 있다.)과 비슷하다.
자신의 코드를 작성할 때 다른 코드가 어떤 것을 '꽂기'를 기대한다. 즉, 호출할 때 인수가 입력되거나 시스템이 특정 상태에 있을 것을 예상한다. 
자신이 작성한 코드에 잘못된 것을이 꽂히면, 큰 문제가 일어나지 않더라도 코드가 작동하지 않을 가능성이 크다. 
자신이 작성한 코드가 호출된 데는 이유가 있는데, 그 코드가 잘못 사용된다면 중요한 일이 수행되지 않거나, 이상하게 동작하지만 눈에 띄지 않는다는 것을 의미할 수도 있다.<br>
**코드를 오용하기 어렵거나 불가능하게 하면 코드가 작동할 뿐만 아니라 계속해서 잘 작동할 가능성을 극대화할 수 있다.**

### 4. 코드를 모듈화하라
모듈화는 개체나 시스템의 구성 요소가 독립적으로 교환되거나 교체될 수 있음을 의미한다.<br>
코드를 외부에 의존하지 않고 실행할 수 있는 모듈로 나누는 것이 이로울 때가 많다.
1. **변화하는 요구 사항에 더 수비게 적응할 수 있는 코드를 작성하는데 도움이 된다.**<br>
한 가지 기능을 변경한다고 해서 다른 부분까지 변경할 필요가 없기 때문이다.
2. **모듈화된 시스템은 일반적으로 이해하기 쉽고 추론하기 쉽다.**<br>
기능이 관리 가능한 단위로 나누어지고 기능 단위 간 상호작용이 잘 정의되고 문서화되기 때문이다.
3. **처음에 작동이 시작되고 그 후에도 계속해서 잘 작동할 가능성이 커진다.**<br>
코드가 하는 일을 개발자들이 오해할 소지가 적기 때문이다.

### 5. 코드를 재사용 가능하고 일반화할 수 있게 작성하라
- 재사용성(reusability) 어떤 문제를 해결하기 위한 무언가가 여러 가지 다른 상황에서도 사용될 수 있음을 의미.
- 일반화성(generalizability) 개념적으로는 유사하지만 서로 미묘하게 다른 문제들을 해결할 수 있음을 의미.

코드가 재사용할 수 있고 일반화되어 있으면 우리는 그 코드를 코드세이스의 여러 부분에서 사용할 수 있고, 여러 가지 문제를 해결할 수 있다.
이런 코드는 시간과 노력을 절약해주고 실제 서비스 환경에서 이미 시도되고 테스트된 논리를 재사용하기 때문에 더 신뢰할 수 있다.

### 6. 테스트가 용이한 코드를 작성하고 제대로 테스트하라
**테스트는 버그와 제대로 동작하지 않는 기능이 코드베이스로 유입될 가능성을 최소화하고, 싫제 서비스 환경에 배포되지 않도록 하기 위해 반드시 필요하다.**
<br>소프트웨어 개발에서 테스트가 중요한 이유
- 소프트웨어 시스템과 코드베이스는 너무 크고 복잡해 한 사람이 모든 세부 사항을 할 수 없다.
- (매우 똑똑한 개발자라 해도) 사람은 실수를 하는 존재다.

**테스트 용이성(testablilty)** 테스트 대상이 되는 '실제'코드를 가리키며 해당 코드가 얼마나 테스트하기 적합한지를 나타낸다. 
테스트 용이성은 모듈화와 깊은 관련이 있으며, 모듈화된 코드는 테스트 용이성이 더 좋다. (모듈화가 되어 있다면 특정 기능의 테스트 시 해당 모듈화된 해당 기능에 대해서만 테스트를 하면 된다.)

코드의 테스트 용이성이 낮으면 제대로 테스트하는 것이 불가능할 수 있다. 현재 작성 중인 코드의 테스트 용이성을 확인하기 위해 코드를 작성하면서 '어떻게 테스트할 것인가?'를 계속 자문하는 것이 좋다.
즉, 코드를 다 작성하고 나서 테스트에 대해 생각해서는 안 된다.

## 1.4 고품질 코드 작성은 일정을 지연시키는가?
높은 품질의 코드를 작성하는 것은 보통 우리 머릿속에 떠오르는 것을 바로 코딩하는 것보다 조금 더 많은 생각과 노력이 필요하다.
코드 품질을 고려하지 않고 먼저 떠오른 대로 코딩하면 처음에는 시간을 절약할 수 있다. 그러나 이런 코드는 머지않아 취약하고 복잡한 코드베이스로 귀결될 것이며,
점점 더 이해하기 어렵고 추론할 수 없는 코드가 된다. 

## 요약
- 좋은 소프트웨어를 만들려면 고품질 코드를 작성해야 한다.
- 실제 서비스 환경에서 실행되는 소프트웨어가 되기 전에 코드는 일반적으로 여러 단계의 검사와 테스트를 통과해야 한다.
- 테스트는 코드를 작성하는 모든 단계에서 고려하는 것이 좋다. 코드를 다 작성하고 난 후에 고려하는 것이 아니다.
- 고품질 코드를 작성하면 처음에는 시간이 오래 걸리지만, 중장기적으로는 개발 시간이 단축되는 경우가 많다.

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
