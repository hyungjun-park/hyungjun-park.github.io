---
layout: post
title:  "[도서] Good Code, Bad Code"
date:   2023-06-26 22:00:25 +0900
categories: jekyll update
---
# 1. 코드 품질
## 1.1 코드는 어떻게 소프트웨어가 되는가
코드로부터 실제 서비스되는 환경에서 실행되는 소프트웨어가 되기까지의 과장은 대개 다음과 같다.
1. 개발자가 코드베이스의 로컬 복사본을 가지고 작업하면서 코드를 변경한다.
2. 작업이 끝나면 코드 검토를 위해 변경된 코드를 가지고 병합 요청을 한다.
3. 다른 개발자가 코드를 검토하고 변경을 제안할 수 있다.
4. 작성자와 검토자가 모두 동의하면 코드가 코드베이스에 병합된다.
5. 배포는 코드베이스를 가지고 주기적으로 일어난다.얼마나 자주 배포되는지는 조직과 팀마다 다를 수 있다.
6. 테스트에 실패하거나 코드가 컴파일되지 않으면 코드베이스에 병합되는 것을 막거나 코드가 배포되는 것을 막는다.

## 1.2 코드 품질의 목표
높은 품질의 코드의 4가지 목표
1. 작동해야 한다.
2. 작동이 멈춰서는 안 된다.
3. 변화하는 요구 사항에 적응해야 한다.
4. 이미 존재하는 기능을 또다시 구현해서는 안 된다.

### 1.2.1 코드는 작동해야 한다.
코드의 첫 번 째 목표는 목적(요구 사항)대로 동작해야 한다는 것.
코드는 우리가 해결하려고 하는 문제를 실제로 해결해야 한다. 이것은 또한 버그가 없다는 것을 의미한다.

### 1.2.2 코드는 작동이 멈추면 안 된다.
왜 코드가 갑자기 작동을 멈출까
- 코드는 다른 코드에 의존할 수 있는데, 그 코드가 수정되고 변경될 수 있다.
- 새로운 기능이 필요할 때 코드를 수정해야 할 수도 있다.
- 해결하려고 하는 문제는 시간이 지남에 따라 변경된다.

현재는 잘 돌아가지만 미래에 이런 것 중 하나가 변경된 경우, 제대로 동작하지 않는다면 그 코드는 별로 유용한 코드가 아니다.<br>
**당장 돌아가는 코드를 만들기는 쉽지만, 변화하는 환경과 요구 사항에도 계속 작동하는 코드를 만드는 것은 훨씬 더 어렵다.**<br>
코드가 계속 작동하도록 보장하는 것은 소프트웨어 엔지니어가 직면하는 큰 과제 중 하나이며, 코딩의 모든 단계에서 고려해야 할 사항이다.

### 1.2.3 코드는 변경된 요구 사항에 적응할 수 있어야 한다.
한 번 작성하고 다시는 수정되지 않는 코드는 거의 없다.
- 비지니스 환경이 변한다
- 사용자 선호가 변한다
- 가정이 더 이상 유효하지 않다.
- 새로운 기능이 계속 추가된다.

코드는 변화 하기 때문에 어떻게 변화할 지 정확히 알지 못해도, 변화에 적응성 높은 코드를 작성해야 한다.

### 1.2.4 코드는 이미 존재하는 기능을 중복 구현해서는 안 된다.
문제 해결을 위해 코드를 작성할 때, 일반적으로 큰 문제를 여러 개의 작은 하위 문제로 나눈다.

이미지 파일을 로드하고 흑백 이미지로 변환한 다음에 다시 저장하는 경우, 해결해야 할 하위 문제는 다음과 같다.
- 파일에서 바이트 데이터를 로드한다
- 바이트 데이터를 분석해서 이미지 형식으로 만든다.
- 이미지를 흑백으로 변환한다.
- 이미지를 다시 바이트로 변환한다.
- 바이트 데이터를 파일로 저장한다.

하위 문제 중 많은 것들은 이미 다른 사람이 해결한 상태이다.<br>
파일에서 바이트 데이터를 로드, 파일 시스템과 통신, 바이트를 이미지로 만드는 문제는 기존 라이브러리가 있을 것이다.<br>
위 말한 기능을 스스로 작성 한다면 이미 존재하는 기능의 중복 구현일 뿐이다.<br>
이미 구현된 코드를 재사용하면 좋은 몇 가지 이유
- **시간과 노력을 절약한다.**
- **버그 가능성을 줄여준다.**
- **기존 전문지식을 활용한다.**
- **코드가 이해하기 쉽다.**

이미 있는 코드는 다시 작성하지 않는다는 개념은 양방향으로 적용된다.<br>
문제 해결을 위한 다른 개발자가 이미 코드를 작성했다면, 그것을 해결하기 위해 그들의 코드를 사용해야 한다.<br>
마찬가지로 어떤 문제를 해결하기 위해 자신이 이미 코드를 작성했다면, 다른 개발자들이 동일 문제 해결하기 위해 **쉽게 재사용할 수 있는 방식으로 코드를 구성**해야 한다.<br>
같은 종류의 하위 문제가 종종 반복해서 발생하기 때문에 다른 개발자와 팀 간의 코드를 공유하면 이점이 많다는 것을 금방 알게 된다.


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
