---
layout: post
title:  "[도서] Good Code, Bad Code - 3. 다른 개발자와 코드 계약"
date:   2023-07-26 19:37:00 +0900
categories: book
---

# 3. 다른 개발자와 코드 계약
**주요 내용**
- 다른 개발자들의 코드와 어떻게 상호작용하는지
- 코드 계약과 코드 계약의 세부 조항
- 세부 조항을 최소화하는 것이 어떻게 오용과 예측을 벗어나는 코드를 예방하는 데 도움이 되는지
- 체크와 어서션을 어떻게 사용할 수 있는지

## 3.1 자신의 코드와 다른 개발자의 코드
팀의 일원으로 코드를 작성한다면 작성한 코드는 다른 개발자들이 작성한 코드를 바탕으로 만들어질 것이고, 
다른 개발자들 또한 그 코드 위에 또 다른 게층을 쌓을 것이다.
간결한 추상화 계층으로 분리했다면, 다른 개발자들은 다른 문제 해결을 위해 이미 작성된 하위 문제 해결 코드를 재사용할 수 있다.

다른 개발자들이 활발하게 코드를 변경하더라도 코드의 품질이 유지되려면 코드가 튼튼하고 사용하기 쉬워야 한다.
고품질 코드를 작성할 때 가장 중요한 고려 사항 중 하나는 다른 개발자가 변경하거나 코드와 상호작용할 때 발생할 수 있는 문제는 없는지,
또 발생한다면 그 문제를 어떻게 완화할 수 있을지를 이해하고 선제적으로 조치하는 것이다.
1인 개발자 회사에서 일하지 않는 한 다른 개발자들을 고려하지 않고는 고품질의 코드를 작성할 수 없다.

### 코드를 작성할 때 고려해야 할 3가지
#### 1. 자신에게 분명하다고 해서 다른 사람에게도 분명한 것은 아니다.
코드가 어떻게 사용되어야 하는지, 무엇을 하는지, 그리고 왜 그 일을 하고 있는지 설명하는 것이 유용하다. 
주석을 많이 작성해야 한다는 의미가 아닌 코드를 이해하기 쉽고 코드 자제로 설명이 되게 하는 것이 좋은 방법이다.

#### 2. 다른 개발자는 무의식중에 여러분의 코드를 망가뜨릴 수 있다.
다른 개발자들이 내가 작성한 코드를 접할 때 그 코드가 왜 존재하는지 혹은 무슨 일을 수행하는지 사전 지식을 가지고 있지 않을 수 있다.
다른 개발자가 의도치 않게 잘 실행되던 코드를 작동하지 않게 하거나 오용하는 방식으로 코드를 추가하거나 수정할 가능성이 크다.
코드의 문제가 생겼을 때 알 수 있는 두가지 방법은 **무언가 문제가 있을 때 코드 컴파일이 중지되거나 테스트가 실패하도록 만드는 것**이다. 
코드에 문제가 생겼을 때 이 두가지 중 하나가 일어나도록 하는 것이 고품질 코드 작성과 관련된 많은 고려 사항들이 궁극적으로 이루고자 하는 것

#### 3. 시간이 지나면 자신의 코드를 기억하지 못한다.
배경지식이 거의 없거나 전혀 없는 사람에게도 자신의 코드가 이해하기 쉬워야 하고, 잘 작동하던 코드에 버그가 발생하는 것이 어려워야 한다.
이렇게 하는 것은 다른 사람에게 호의를 베푸는 것이기도 하지만 미래의 자신에게도 유익한 일이다.

## 3.2 우리가 작성한 코드의 사용법을 다른 사람들은 어떻게 아는가?
코드를 어떻게 사용해야 하는지 알아내기 위해 할 수 있는 일은 다음과 같다.
- 함수, 클래스, 열거형 등의 이름을 살펴본다.
- 함수와 생성자의 매개변수 유형 또는 반환값의 유형 같은 데이터 유형을 살펴본다.
- 함수/클래스 수준의 문서나 주석문을 읽어본다.
- 직접 와서 묻거나 채팅/이메일을 통해 문의한다.
- 작성한 함수와 클래스의 자세한 구현 코드를 읽는다.

이 중 처름 세 가지만이 실제로 사용할 만하고, 그중에서도 이름과 데이터 유형을 확인하는 것이 문서를 읽는 것보다 더 신뢰할 만하다.

### 3.2.1 이름 확인
이름들을 살펴보는 것은 문제를 해결할 코드를 찾기 위한 편리하고 빠른 방법이다. 코드를 사용할 때 이름을 무시하기는 매우 어렵다.
**자신의 코드를 다른 개발자가 어떻게 사용해야 하는지에 대해 가장 잘 전달할 수 있는 방법 중 하나는 이름을 잘 짓는 것이다.**

### 3.2.2 데이터 유형 확인
(예: 컴파일 언어) 데이터 유형을 올바르게 사용하지 않으면 코드가 컴파일되지 않는다. 
데이터 유형을 확인하는 언어로 코드를 작성하는 것은 다른 개발자가 코드를 오용하거나 오작동할 수 없도록 하기 위한 좋은 방법이다.

### 3.2.3 문서 읽기
코드 사용에 대한 문서
- 할수 및 클래스 수준의 비공식적인 주석문
- 자바독과 같은 좀 더 공식적인 코드 내 문서
- 외부 문서(README.md, 웹 페이지, 지침 문서 등)

문서는 매우 유용하지만 다른 개발자가 코드를 올바르게 사용하도록 하기 위한 방법으로 어느 정도까지만 신뢰할 수 있다.
- 다른 개발자가 문서들을 읽을 것이라는 보장이 없으며 실제로 읽지 않을 때가 많다.
- 읽더라도 잘못 해설할 수 있다.
- 문서의 업데이트가 제대로 안 될 수 있다.

### 3.2.4 직접 물어보기
코드를 작성한 지 얼마되지 않았다면 효과적일 수 있으나, 여러 이유로 신뢰하기 어려운 방법이다.
- 코드를 많이 작성할수록 질문에 답하는 데 더 많은 시간을 써야 할 것이다.
- 코드 작성자가 없다면(휴가) 물어볼 사람이 없다.
- 1년이 지나면 자기 자신도 그 코드를 기억하지 못한다. 즉 어느 정도 제한된 기간 동안만 효과가 있다.
- 코드를 작성한 사람이 회사를 떠난다면 코드를 사용하는 방법에 대한 지식이 사라져 버린다.

### 3.2.5 코드를 살펴보는 것
코드 사용 방법에 대한 가장 확실한 답을 얻을 수 있는 방법은 코드의 자세한 구현 세부 사항을 살펴보는 것이다.
하지만 이 방법은 실용적이지도 않고 코드의 양이 많으면 효과를 얻기 힘들다.
코드베이스에 작업하는 모든 개발자가 '내 코드의 사용 방법을 이해하고 싶으면 코드 안에서 어떻게 구현됐는지 읽어보면 되지 뭐'라는 자세를 갖는다면 상황은 더 악화될 수 있다.
오래지 않아 모든 개발자들은 적당한 크기의 기능을 구현하려고 해도 많은 양의 코드를 읽어야 할 수도 있다.


추상화 계층을 만드는 데 있어 요점은 **개발자가 한 번에 몇 가지 개념만 처리**해야 하고,
**그 문제가 어떻게 해결되었는지 정확히 알지 못하더라도 하위 문제에 대한 해결책을 사용할 수 있어야 한다**는 것이다.
코드를 사용하는 방법을 알기 위해 개발자가 구현 세부 사항을 읽어야 한다면 이는 분명히 추상화 계층의 많은 이점을 부정하는 것이 된다.




