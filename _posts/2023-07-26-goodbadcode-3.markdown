---
layout: post
title:  "[도서] Good Code, Bad Code - 2. 추상화 계층"
date:   2023-07-26 19:37:00 +0900
categories: book
---

# 3. 다른 개발자와 코드 계약
**주요 내용**
- 다른 개발자들의 코드와 어떻게 상호작용하는지
- 코드 계약과 코드 계약의 세부 조항
- 세부 조항을 최소화하는 것이 어떻게 오용과 예측을 벗어나는 코드를 예방하는 데 도움이 되는지
- 체크와 어서션을 어떻게 사용할 수 있는지

## 3.1 자신의 코드와 다른 개발자의 코드
팀의 일원으로 코드를 작성한다면 작성한 코드는 다른 개발자들이 작성한 코드를 바탕으로 만들어질 것이고, 
다른 개발자들 또한 그 코드 위에 또 다른 게층을 쌓을 것이다.
간결한 추상화 계층으로 분리했다면, 다른 개발자들은 다른 문제 해결을 위해 이미 작성된 하위 문제 해결 코드를 재사용할 수 있다.

다른 개발자들이 활발하게 코드를 변경하더라도 코드의 품질이 유지되려면 코드가 튼튼하고 사용하기 쉬워야 한다.
고품질 코드를 작성할 때 가장 중요한 고려 사항 중 하나는 다른 개발자가 변경하거나 코드와 상호작용할 때 발생할 수 있는 문제는 없는지,
또 발생한다면 그 문제를 어떻게 완화할 수 있을지를 이해하고 선제적으로 조치하는 것이다.
1인 개발자 회사에서 일하지 않는 한 다른 개발자들을 고려하지 않고는 고품질의 코드를 작성할 수 없다.

### 코드를 작성할 때 고려해야 할 3가지
#### 1. 자신에게 분명하다고 해서 다른 사람에게도 분명한 것은 아니다.
코드가 어떻게 사용되어야 하는지, 무엇을 하는지, 그리고 왜 그 일을 하고 있는지 설명하는 것이 유용하다. 
주석을 많이 작성해야 한다는 의미가 아닌 코드를 이해하기 쉽고 코드 자제로 설명이 되게 하는 것이 좋은 방법이다.

#### 2. 다른 개발자는 무의식중에 여러분의 코드를 망가뜨릴 수 있다.
다른 개발자들이 내가 작성한 코드를 접할 때 그 코드가 왜 존재하는지 혹은 무슨 일을 수행하는지 사전 지식을 가지고 있지 않을 수 있다.
다른 개발자가 의도치 않게 잘 실행되던 코드를 작동하지 않게 하거나 오용하는 방식으로 코드를 추가하거나 수정할 가능성이 크다.
코드의 문제가 생겼을 때 알 수 있는 두가지 방법은 **무언가 문제가 있을 때 코드 컴파일이 중지되거나 테스트가 실패하도록 만드는 것**이다. 
코드에 문제가 생겼을 때 이 두가지 중 하나가 일어나도록 하는 것이 고품질 코드 작성과 관련된 많은 고려 사항들이 궁극적으로 이루고자 하는 것

#### 3. 시간이 지나면 자신의 코드를 기억하지 못한다.
배경지식이 거의 없거나 전혀 없는 사람에게도 자신의 코드가 이해하기 쉬워야 하고, 잘 작동하던 코드에 버그가 발생하는 것이 어려워야 한다.
이렇게 하는 것은 다른 사람에게 호의를 베푸는 것이기도 하지만 미래의 자신에게도 유익한 일이다.


