---
layout: post
title:  "카프카(Kafka)의 기본 개념 정리"
date:   2023-08-21 21:37:00 +0900
categories: dev
---

# 카프카의 기본 개념 정리

## 카프카가 데이터 파이프라인으로 적합한 4가지 이유
### 1. 높은 처리량
카프카는 프로듀서가 브로커로 데이터를 보낼 때와 컨슈머가 브로커로부터 데이터를 받을 때 모두 묶어서 전송한다.
많은 양의 데이터를 묶음 단위로 처리하는 배치로 빠르게 처리할 수 있기 때문에 대용량의 실시간 로그데이터를 처리하는 데에 적합하다.
파티션 단위를 통해 동일 목적의 데이터를 여러 파티션에 분배하고 데이터를 병렬 처리할 수 있다.

### 2. 확장성
데이터 파이프라인에서 데이터를 모을 때 데이터가 얼마나 들어올지 예측하기 어렵다.
카프카는 이러한 가변적인 환경에서 안정적으로 확장 가능하도록 설계되었다.
데이터가 적을 때는 카프카 클러스터의 브로커를 최소한의 개수로 운영하다가 데이터가 많아지면 클러스터의 브로커 개수를 자연스럽게 늘려 스케일 아웃할 수 있다. (반대로 스케일 인도 가능)

### 3. 영속성
영속성이란 데이터를 생성한 프로그램이 종료되더라도 사라지지 않은 데이터의 특성을 말한다.
카프카는 전송받은 데이터를 메모리에 저장하지 않고 파일 시스템에 저장, 디스크 기반의 파일 시스템을 활용한 덕분에 브로커 애플리케이션이 장애 발생으로 인해
급작스럽게 종료되더라도 프로세스를 재시작하여 안전하게 데이터를 다시 처리할 수 있다.

카프카는 웅영체제 운영체제 레벨에서 파일 시스템을 최대한 활용하는 방법을 적용, 파일 I/O 성능 향상을 위해 페이지 캐시영역을 메모리에 따로 생성하여 사용한다.
한번 읽은 파일 내용은 메모리에 저장시켰다가 다시 사용하는 방식이기 때문에 데이터를 저장, 전송하더라도 처리량이 높은 것

### 4. 고가용성
3개 이상의 서버들로 웅여되는 카프카 클러스터는 일부 서버에 장애가 발생하더라도 무중단으로 안전하고 지속적으로 데이터를 처리할 수 있다.
프로듀서로 전송받은 데이터를 여러 브로커 중 1대의 브로커에만 저장하는 것이 아니라 또 다른 브로커에도 저장한 것(복제), 
한 브로커에 장애가 발생하더라도 복제된 데이터가 나머지 브로커에 저장되어 있어 지속적으로 데이터 처리가 가능하다.

## 카프카 생태계
<img width="800" alt="스크린샷 2023-08-22 오전 2 54 36" src="https://github.com/hyungjun-park/hyungjun-park.github.io/assets/9457532/b810c5e3-2ec8-4aca-a57c-e70cfae767b1">

## 카프카 브로커/클러스터/주키퍼
<img width="800" alt="스크린샷 2023-08-22 오전 2 58 55" src="https://github.com/hyungjun-park/hyungjun-park.github.io/assets/9457532/fc12c78a-0996-4ac3-987e-a57b996eaafe">

카프카 브로커는 카프카 클라이언트와 데이터를 주고받기 위해 사용하는 주체이자, 데이터를 분산 저장하여 장애가 발생하더라도 안전하게 사용할 수 있도록 도와주는 애플리케이션으로
하나의 서버에는 한 개의 카프카 브로커 프로세스가 실행된다. 
브로커 서버 1대로도 기본 기능이 실행되지만 데이터를 안전하게 보관하고 처리하기 위해 3대 시상의 브로커 서버를 1개의 클러스터로 묶어서 운영한다.
- 카프카 클러스터를 실행하기 위해서는 주키퍼가 필요
- 카프카 3.0 부터는 주키퍼가 없어도 클러스터 동작 가능

## 브로커
### 브로커의 역할
#### 컨트롤러
클러스터의 다수 브로커 중 한 대가 컨트롤러의 역할을 한다. 컨트롤러는 다른 브로커들의 상태를 체크하고 브로커가 클러스터에서 빠지는 경우 해당 브로커에 존재하는 리더 파티션을 재분배한다.
만약 컨트롤러 역할을 하는 브로커에 장애가 생기면 다른 브로커가 컨트롤러 역할을 한다. 
#### 데이터 삭제
카프카는 컨슈머가 데이터를 가져가더라도 토픽의 데이터는 삭제되지 않는다. 오직 브로커만이 데이터를 삭제할 수 있다.
데이터 삭제는 파일 단위로 파일 단위로 이루어지고 이 단위를 '로그 세그먼트'라고 부른다.
세그먼트에서는 일반적인 데이터베이스처럼 특정 데이터를 선별해서 삭제할 수 없다.

#### 컨슈머 오프셋 저장
컨슈머 그룹은 토픽이 특정 파티션으로부터 어느 레코드까지 가져갔는지 확인하기 위해 오프셋을 커밋한다. 
커밋한 오프셋은 _consumer_offsets 토픽에 저장, 여기에 저장된 오프셋을 토대로 컨슈머 그룹은 다음 레코드를 가져가서 처리한다.

#### 그룹 코디네이터
코디네이터는 컨슈머 그룹의 상태를 체크하고 파티션을 컨슈머와 매칭되도록 분배하는 역할을 한다.
컨슈머가 컨슈머 그룹에서 빠지면 매칭되지 않은 파티션을 정상 동작하는 컨슈머로 할당하여 끊임없이 데이터가 처리되도록 도와준다.
  (파티션을 컨슈머로 재할당하는 과정을 '리밸런스 rebalance'라고 한다.)

#### 데이터의 저장
- config/server.properties 의 log.dir 옵션에 정의한 디렉토리에 데이터를 저장한다.
- .log 에는 메시지와 메타데이터
- .index 에는 메시지의 오프셋을 인덱싱한 정보
- .timeindex 에는 메시지에 포함된 timestamp값을 기준으로 인덱싱한 정보

<img width="800" alt="스크린샷 2023-08-22 오전 3 24 30" src="https://github.com/hyungjun-park/hyungjun-park.github.io/assets/9457532/e5f196b8-fb9b-484e-b586-03c20c43b38b">

#### 복제(Replication)
<img width="800" alt="스크린샷 2023-08-22 오전 3 30 51" src="https://github.com/hyungjun-park/hyungjun-park.github.io/assets/9457532/27bf54d1-b6f0-49c4-b887-837f8f56d5d0">

데이터 복제는 카프카를 장애 허용 시스템(fault tolerant system)으로 동작하도록 하는 원동력이다. 복제의 이유는 클러스터로 묶음 브로커 중 일부에 장애가 발생하더라도 데이터를 유실하지 않고 안전하게 사용하기 위함이다.

파티션은 리더와 팔로워로 구성된다. 프로듀서, 컨슈머와 직접 통신하는 파티션을 리더, 나머지 복제 데이터를 가지고 있는 파티션을 팔로워라고 부른다.
팔로워 파티션들은 리더 파티션의 오프셋을 확인하여 현재 자신이 가지고 있는 오프셋과 차이나는 경우 리더 파티션으로 부터 데이터를 가져와서 저장하는데 이 과정을 '복제'라고 부른다.

### 브로커에 장애가 발생한 경우
<img width="800" alt="스크린샷 2023-08-22 오전 3 44 01" src="https://github.com/hyungjun-park/hyungjun-park.github.io/assets/9457532/22bbe806-54ca-442a-b5b6-6b24e3ea8051">

브로커가 다운되면 해당 브로커에 있는 리더파티션은 사용할수 없기 때문에 팔로워 파티션 중 하나가 리더 파티션 지위를 넘겨받는다.
이를 통해 데이터가 유실되지 않고 컨슈머나 프로듀서와 데이터를 주고 받도록 동작할 수 있다.

#### ISR (In-Sync-Replicas)
ISR은 리더 파티션과 팔로워 파티션이 모두 싱크가 된 상태를 뜻한다.




